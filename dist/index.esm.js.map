{"version":3,"file":"index.esm.js","sources":["../src/constants/metadata-keys.constants.ts","../src/utils/extend-array-metadata.ts","../src/utils/resolve-path.ts","../src/decorators/factory-field.decorator.ts","../src/decorators/factory-relation-field.decorator.ts","../src/lib/overridable.ts","../src/lib/factory.ts"],"sourcesContent":["export const FACTORY_FIELD = Symbol(\"FACTORY_FIELD_METADATA\");\nexport const FACTORY_RELATION = Symbol(\"FACTORY_RELATION_METADATA\");\n","export function extendArrayMetadata(key, metadata, target) {\n    const previousValue = Reflect.getMetadata(key, target) || [];\n    const value = [...previousValue, ...metadata];\n    Reflect.defineMetadata(key, value, target);\n}\n","export function resolvePath(entity, path) {\n    if (!path || !entity) {\n        return undefined;\n    }\n    let current = entity;\n    let part = \"\";\n    for (let i = 0; i <= path.length; i++) {\n        const char = path[i];\n        if (char === \".\" || i === path.length) {\n            if (Array.isArray(current)) {\n                const results = [];\n                for (const item of current) {\n                    if (item && item[part] !== undefined) {\n                        results.push(item[part]);\n                    }\n                }\n                current = results.length ? results : undefined;\n            }\n            else {\n                if (current === undefined) {\n                    return undefined;\n                }\n                current = current[part];\n            }\n            part = \"\";\n        }\n        else {\n            part += char;\n        }\n    }\n    return current;\n}\n","import { FACTORY_FIELD } from \"../constants\";\nimport { extendArrayMetadata } from \"../utils\";\nexport function FactoryField(getValueFn) {\n    return (target, propertyKey) => {\n        const metadata = {\n            property: propertyKey,\n            getValueFN: getValueFn,\n        };\n        extendArrayMetadata(FACTORY_FIELD, [metadata], target.constructor);\n    };\n}\n","import { FACTORY_RELATION } from \"../constants\";\nimport { extendArrayMetadata } from \"../utils\";\nexport function FactoryRelationField(returnValueFN, keyBinding) {\n    return (target, propertyKey) => {\n        const factoryRelationMetadata = {\n            property: propertyKey,\n            returnTypeFn: returnValueFN,\n            keyBinding,\n        };\n        extendArrayMetadata(FACTORY_RELATION, [factoryRelationMetadata], target.constructor);\n    };\n}\n","export class Overridable {\n    constructor(instance) {\n        this.instance = instance;\n    }\n    override(override) {\n        this.deepMerge(this.instance, override(this.instance));\n        return this.instance;\n    }\n    getInstance() {\n        return this.instance;\n    }\n    deepMerge(entity, override) {\n        if (!override)\n            return;\n        for (const [key, value] of Object.entries(override)) {\n            if (value instanceof Date) {\n                entity[key] = value;\n                continue;\n            }\n            if (Array.isArray(entity[key]) && Array.isArray(value)) {\n                this.mergeArray(entity[key], value);\n                continue;\n            }\n            if (value !== null && typeof value === \"object\" && typeof entity[key] === \"object\") {\n                this.deepMerge(entity[key], value);\n                continue;\n            }\n            entity[key] = value;\n        }\n    }\n    mergeArray(entityArray, overrideArray) {\n        for (const [index, valueToMerge] of overrideArray.entries()) {\n            if (valueToMerge instanceof Date) {\n                entityArray[index] = valueToMerge;\n                continue;\n            }\n            if (typeof valueToMerge === \"object\" && valueToMerge !== null) {\n                this.deepMerge(entityArray[index], valueToMerge);\n                continue;\n            }\n            entityArray[index] = valueToMerge;\n        }\n    }\n}\n","import { resolvePath } from \"src/utils\";\nimport { FACTORY_FIELD, FACTORY_RELATION } from \"../constants\";\nimport { Overridable } from \"./overridable\";\nexport class OneFactory {\n    constructor(factory, entity, select) {\n        this.factory = factory;\n        this.entity = entity;\n        this.select = select;\n    }\n    override(overrideFn) {\n        this.overrideFn = overrideFn;\n        return this;\n    }\n    partial(select) {\n        this.partialSelect = select;\n        return this;\n    }\n    make() {\n        let instance;\n        if (this.partialSelect) {\n            instance = this.factory.partial(this.entity, this.partialSelect);\n        }\n        else {\n            instance = this.factory.new(this.entity, this.select);\n        }\n        if (this.overrideFn) {\n            return new Overridable(instance).override(this.overrideFn);\n        }\n        return instance;\n    }\n    build() {\n        return this.make();\n    }\n}\nexport class ManyFactory {\n    constructor(factory, entity, amount, select) {\n        this.factory = factory;\n        this.entity = entity;\n        this.amount = amount;\n        this.select = select;\n    }\n    override(overrideFn) {\n        this.overrideFn = overrideFn;\n        return this;\n    }\n    partial(select) {\n        this.partialSelect = select;\n        return this;\n    }\n    make() {\n        let instances;\n        if (this.partialSelect) {\n            instances = new Array(this.amount).fill(null).map(() => this.factory.partial(this.entity, this.partialSelect));\n        }\n        else {\n            instances = this.factory.newList(this.entity, this.amount, this.select);\n        }\n        if (this.overrideFn) {\n            const overrides = this.overrideFn(instances);\n            return instances.map((instance, index) => {\n                if (index < overrides.length) {\n                    return new Overridable(instance).override(() => overrides[index]);\n                }\n                return instance;\n            });\n        }\n        return instances;\n    }\n    build() {\n        return this.make();\n    }\n}\nexport class Factory {\n    constructor(fakerInstance) {\n        this.faker = fakerInstance;\n    }\n    one(entity, select) {\n        return new OneFactory(this, entity, select);\n    }\n    many(entity, amount, select) {\n        return new ManyFactory(this, entity, amount, select);\n    }\n    create(entity, select) {\n        return new Overridable(this.new(entity, select));\n    }\n    createList(entity, amount, select) {\n        const entities = this.newList(entity, amount, select);\n        return new Overridable(entities);\n    }\n    new(entity, select) {\n        const instance = this.createInstance(entity, select);\n        this.applyRelations(entity, instance, select);\n        return instance;\n    }\n    newList(entity, amount, select) {\n        return new Array(amount).fill(null).map(() => this.new(entity, select));\n    }\n    partial(entity, select) {\n        const instance = this.createPartialInstance(entity, select);\n        this.applyPartialRelations(entity, instance, select);\n        return instance;\n    }\n    applyEntityRelations(entity, instance, select, isPartial = false) {\n        const relationFieldMetadata = Reflect.getMetadata(FACTORY_RELATION, entity) || [];\n        for (const meta of relationFieldMetadata) {\n            const selectedField = select === null || select === void 0 ? void 0 : select[meta.property];\n            if (selectedField) {\n                const returnType = meta.returnTypeFn();\n                const isRelationArray = Array.isArray(returnType);\n                const relationType = isRelationArray ? returnType[0] : returnType;\n                if (isRelationArray) {\n                    const [instancesToCreate, relationSelect] = selectedField;\n                    instance[meta.property] = new Array(instancesToCreate).fill(null).map(() => {\n                        const relationInstance = isPartial\n                            ? this.partial(relationType, relationSelect || {})\n                            : this.new(relationType, relationSelect);\n                        this.applyKeyBinding(meta, instance, relationInstance);\n                        if (!isPartial) {\n                            this.bindNestedRelations(relationInstance);\n                        }\n                        return relationInstance;\n                    });\n                    continue;\n                }\n                const relationInstance = isPartial\n                    ? this.partial(relationType, selectedField)\n                    : this.new(relationType, selectedField);\n                this.applyKeyBinding(meta, instance, relationInstance);\n                if (!isPartial) {\n                    this.bindNestedRelations(relationInstance);\n                }\n                instance[meta.property] = relationInstance;\n            }\n        }\n    }\n    applyRelations(entity, instance, select) {\n        this.applyEntityRelations(entity, instance, select, false);\n    }\n    applyKeyBinding(meta, parentInstance, relationInstance) {\n        if (meta.keyBinding) {\n            const parentValue = resolvePath(parentInstance, meta.keyBinding.key);\n            if (parentValue !== undefined) {\n                relationInstance[meta.keyBinding.inverseKey] = parentValue;\n            }\n        }\n    }\n    bindNestedRelations(relationInstance) {\n        const nestedRelationMetadata = Reflect.getMetadata(FACTORY_RELATION, relationInstance.constructor) || [];\n        for (const nestedMeta of nestedRelationMetadata) {\n            const nestedField = relationInstance[nestedMeta.property];\n            if (!nestedField)\n                continue;\n            if (Array.isArray(nestedField)) {\n                for (const nested of nestedField) {\n                    this.applyKeyBinding(nestedMeta, relationInstance, nested);\n                }\n            }\n            else if (nestedField && typeof nestedField === \"object\") {\n                this.applyKeyBinding(nestedMeta, relationInstance, nestedField);\n            }\n        }\n    }\n    createEntityInstance(entity, select, isPartial = false) {\n        const instance = new entity();\n        const fieldMetadata = Reflect.getMetadata(FACTORY_FIELD, entity) || [];\n        for (const meta of fieldMetadata) {\n            const fieldSelect = select === null || select === void 0 ? void 0 : select[meta.property];\n            if (isPartial) {\n                if (fieldSelect === true) {\n                    instance[meta.property] = meta.getValueFN(this.faker);\n                }\n            }\n            else {\n                if (fieldSelect !== false) {\n                    instance[meta.property] = meta.getValueFN(this.faker);\n                }\n            }\n        }\n        return instance;\n    }\n    createInstance(entity, select) {\n        return this.createEntityInstance(entity, select, false);\n    }\n    createPartialInstance(entity, select) {\n        return this.createEntityInstance(entity, select, true);\n    }\n    applyPartialRelations(entity, instance, select) {\n        this.applyEntityRelations(entity, instance, select, true);\n    }\n}\n"],"names":[],"mappings":"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"}